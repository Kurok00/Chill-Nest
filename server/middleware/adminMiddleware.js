const jwt = require('jsonwebtoken');
const User = require('../models/userModel');

const protectAdmin = async (req, res, next) => {
  let token;

  console.log('=== B·∫ÆT ƒê·∫¶U ADMIN MIDDLEWARE ===');
  console.log('Request URL:', req.originalUrl);
  console.log('Request Method:', req.method);
  console.log('Headers Authorization:', req.headers.authorization);
  console.log('JWT_SECRET t·ªìn t·∫°i:', !!process.env.JWT_SECRET);
  console.log('Timestamp:', new Date().toISOString());

  if (
    req.headers.authorization &&
    req.headers.authorization.startsWith('Bearer')
  ) {
    console.log('‚úì T√¨m th·∫•y Bearer token trong header');
    try {
      // Get token from header
      token = req.headers.authorization.split(' ')[1];
      console.log('‚úì Token ƒë∆∞·ª£c tr√≠ch xu·∫•t th√†nh c√¥ng');
      console.log('Token length:', token.length);
      console.log('Token preview:', token.substring(0, 50) + '...');

      // Verify token
      console.log('üîç B·∫Øt ƒë·∫ßu verify token...');
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      console.log('‚úì Token verify th√†nh c√¥ng');
      console.log('Token decoded data:', JSON.stringify(decoded, null, 2));

      // Get admin from the token
      console.log('üîç T√¨m ki·∫øm user trong database v·ªõi ID:', decoded.id);
      req.admin = await User.findById(decoded.id).select('-password');
      console.log('Database query completed');
      
      if (req.admin) {
        console.log('‚úì T√¨m th·∫•y user trong database');
        console.log('User info:', {
          id: req.admin._id,
          username: req.admin.user_name,
          email: req.admin.email,
          role: req.admin.role,
          isVerified: req.admin.is_verified
        });
      } else {
        console.log('‚ùå KH√îNG t√¨m th·∫•y user trong database');
      }

      // Check if user exists
      if (!req.admin) {
        console.log('‚ùå L·ªñI: User kh√¥ng t·ªìn t·∫°i trong database');
        console.log('User ID t·ª´ token:', decoded.id);
        console.log('Tr·∫£ v·ªÅ l·ªói 401');
        return res.status(401).json({ 
          message: 'Token kh√¥ng h·ª£p l·ªá - ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i',
          debug: {
            userId: decoded.id,
            timestamp: new Date().toISOString()
          }
        });
      }

      // Check if user is admin
      console.log('üîç Ki·ªÉm tra quy·ªÅn admin...');
      console.log('User role hi·ªán t·∫°i:', req.admin.role);
      if (req.admin.role !== 'admin') {
        console.log('‚ùå L·ªñI: User kh√¥ng c√≥ quy·ªÅn admin');
        console.log('Role th·ª±c t·∫ø:', req.admin.role);
        console.log('Role y√™u c·∫ßu: admin');
        return res.status(403).json({ 
          message: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang qu·∫£n tr·ªã',
          debug: {
            currentRole: req.admin.role,
            requiredRole: 'admin',
            userId: req.admin._id
          }
        });
      }

      console.log('‚úÖ T·∫§T C·∫¢ KI·ªÇM TRA TH√ÄNH C√îNG');
      console.log('=== K·∫æT TH√öC ADMIN MIDDLEWARE ===');
      next();
    } catch (error) {
      console.log('‚ùå L·ªñI KHI VERIFY TOKEN');
      console.log('Error name:', error.name);
      console.log('Error message:', error.message);
      console.log('Error stack:', error.stack);
      console.log('Token ƒë√£ g·ª≠i:', token);
      
      if (error.name === 'TokenExpiredError') {
        console.log('üïê Token ƒë√£ h·∫øt h·∫°n');
        console.log('Expired at:', error.expiredAt);
        return res.status(401).json({ 
          message: 'Token ƒë√£ h·∫øt h·∫°n',
          debug: {
            expiredAt: error.expiredAt,
            error: 'TokenExpiredError'
          }
        });
      } else if (error.name === 'JsonWebTokenError') {
        console.log('üîê Token kh√¥ng h·ª£p l·ªá');
        return res.status(401).json({ 
          message: 'Token kh√¥ng h·ª£p l·ªá',
          debug: {
            error: 'JsonWebTokenError',
            message: error.message
          }
        });
      } else {
        console.log('üî• L·ªói kh√¥ng x√°c ƒë·ªãnh');
        return res.status(401).json({ 
          message: 'L·ªói x√°c th·ª±c kh√¥ng x√°c ƒë·ªãnh',
          debug: {
            error: error.name,
            message: error.message
          }
        });
      }
    }
  } else {
    console.log('‚ùå KH√îNG T√åM TH·∫§Y BEARER TOKEN');
    console.log('Authorization header:', req.headers.authorization);
    console.log('All headers:', JSON.stringify(req.headers, null, 2));
    res.status(401).json({ 
      message: 'Kh√¥ng ƒë∆∞·ª£c ph√©p truy c·∫≠p, kh√¥ng c√≥ token',
      debug: {
        hasAuthHeader: !!req.headers.authorization,
        authHeader: req.headers.authorization
      }
    });
  }
};

module.exports = { protectAdmin };
